type Account {
  id: ID!
  name: String!
  owner: String!
  lastLogin: AWSTimestamp
  heroes(filter: ModelHeroFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelHeroConnection
}

type Hero {
  id: ID!
  account: Account
  name: String!
  image: Image!
  online: Boolean!
  level: Int!
  exp: Float!
  title: String!
  race: Race!
  lore: String!
  skills: [Skill!]!
}

type Image {
  id: ID!
  bucket: String!
  fullsize: ImageS3Info!
  thumbnail: ImageS3Info!
}

type ImageS3Info {
  key: String!
  width: Int!
  height: Int!
}

type Race {
  id: ID!
  name: String!
  description: String!
}

type Skill {
  id: ID!
  rank: Int!
  description: String!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelAccountConnection {
  items: [Account]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelAccountFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  owner: ModelStringFilterInput
  lastLogin: ModelIntFilterInput
  and: [ModelAccountFilterInput]
  or: [ModelAccountFilterInput]
  not: ModelAccountFilterInput
}

type Query {
  getAccount(id: ID!): Account
  listAccounts(filter: ModelAccountFilterInput, limit: Int, nextToken: String): ModelAccountConnection
  getHero(id: ID!): Hero
  listHeros(filter: ModelHeroFilterInput, limit: Int, nextToken: String): ModelHeroConnection
  getImage(id: ID!): Image
  listImages(filter: ModelImageFilterInput, limit: Int, nextToken: String): ModelImageConnection
  getRace(id: ID!): Race
  listRaces(filter: ModelRaceFilterInput, limit: Int, nextToken: String): ModelRaceConnection
}

input CreateAccountInput {
  id: ID
  name: String!
  owner: String!
  lastLogin: AWSTimestamp
}

input UpdateAccountInput {
  id: ID!
  name: String
  owner: String
  lastLogin: AWSTimestamp
}

input DeleteAccountInput {
  id: ID
}

type Mutation {
  createAccount(input: CreateAccountInput!): Account
  updateAccount(input: UpdateAccountInput!): Account
  deleteAccount(input: DeleteAccountInput!): Account
  createHero(input: CreateHeroInput!): Hero
  updateHero(input: UpdateHeroInput!): Hero
  deleteHero(input: DeleteHeroInput!): Hero
  createImage(input: CreateImageInput!): Image
  updateImage(input: UpdateImageInput!): Image
  deleteImage(input: DeleteImageInput!): Image
  createRace(input: CreateRaceInput!): Race
  updateRace(input: UpdateRaceInput!): Race
  deleteRace(input: DeleteRaceInput!): Race
}

type Subscription {
  onCreateAccount: Account @aws_subscribe(mutations: ["createAccount"])
  onUpdateAccount: Account @aws_subscribe(mutations: ["updateAccount"])
  onDeleteAccount: Account @aws_subscribe(mutations: ["deleteAccount"])
  onCreateHero: Hero @aws_subscribe(mutations: ["createHero"])
  onUpdateHero: Hero @aws_subscribe(mutations: ["updateHero"])
  onDeleteHero: Hero @aws_subscribe(mutations: ["deleteHero"])
  onCreateImage: Image @aws_subscribe(mutations: ["createImage"])
  onUpdateImage: Image @aws_subscribe(mutations: ["updateImage"])
  onDeleteImage: Image @aws_subscribe(mutations: ["deleteImage"])
  onCreateRace: Race @aws_subscribe(mutations: ["createRace"])
  onUpdateRace: Race @aws_subscribe(mutations: ["updateRace"])
  onDeleteRace: Race @aws_subscribe(mutations: ["deleteRace"])
}

input SkillInput {
  rank: Int!
  description: String!
}

type ModelHeroConnection {
  items: [Hero]
  nextToken: String
}

input ModelHeroFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  online: ModelBooleanFilterInput
  level: ModelIntFilterInput
  exp: ModelFloatFilterInput
  title: ModelStringFilterInput
  lore: ModelStringFilterInput
  and: [ModelHeroFilterInput]
  or: [ModelHeroFilterInput]
  not: ModelHeroFilterInput
}

input CreateHeroInput {
  id: ID
  name: String!
  online: Boolean!
  level: Int!
  exp: Float!
  title: String!
  lore: String!
  skills: [SkillInput!]!
  heroAccountId: ID
}

input UpdateHeroInput {
  id: ID!
  name: String
  online: Boolean
  level: Int
  exp: Float
  title: String
  lore: String
  skills: [SkillInput!]
  heroAccountId: ID
}

input DeleteHeroInput {
  id: ID
}

input ImageS3InfoInput {
  key: String!
  width: Int!
  height: Int!
}

type ModelImageConnection {
  items: [Image]
  nextToken: String
}

input ModelImageFilterInput {
  id: ModelIDFilterInput
  bucket: ModelStringFilterInput
  and: [ModelImageFilterInput]
  or: [ModelImageFilterInput]
  not: ModelImageFilterInput
}

input CreateImageInput {
  id: ID
  bucket: String!
  fullsize: ImageS3InfoInput!
  thumbnail: ImageS3InfoInput!
}

input UpdateImageInput {
  id: ID!
  bucket: String
  fullsize: ImageS3InfoInput
  thumbnail: ImageS3InfoInput
}

input DeleteImageInput {
  id: ID
}

type ModelRaceConnection {
  items: [Race]
  nextToken: String
}

input ModelRaceFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  description: ModelStringFilterInput
  and: [ModelRaceFilterInput]
  or: [ModelRaceFilterInput]
  not: ModelRaceFilterInput
}

input CreateRaceInput {
  id: ID
  name: String!
  description: String!
}

input UpdateRaceInput {
  id: ID!
  name: String
  description: String
}

input DeleteRaceInput {
  id: ID
}
